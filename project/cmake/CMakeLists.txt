project(xbmc)

cmake_minimum_required(VERSION 2.8.8)

include(ExternalProject)
include(AddOptions.cmake)
include(Scripts/Macros.cmake)
include(Scripts/ManageString.cmake)
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/Modules)

enable_language(CXX)
enable_language(C)

option(ENABLE_DVDCSS      "Enable libdvdcss support?" ON)
option(ENABLE_PULSEAUDIO  "Enable PulseAudio support?" OFF)
option(ENABLE_VDPAU       "Enable VDPAU support?" ON)
option(ENABLE_VAAPI       "Enable VAAPI support?" ON)
option(ENABLE_UPNP        "Enable UPnP support?" ON)
option(ENABLE_NONFREE     "Enable non-free components?" ON)
option(ENABLE_MICROHTTPD  "Enable MicroHttpd webserver?" ON)
option(ENABLE_LAME        "Enable LAME mp3 encoder?" ON)
option(ENABLE_MYSQLCLIENT "Enable MySql support?" ON)
option(ENABLE_ALSA        "Enable ALSA support?" ON)
option(ENABLE_UDEV        "Enable UDev support?" ON)
option(ENABLE_LIBUSB      "Enable libusb support?" ON)
option(ENABLE_AVAHI       "Enable Avahi support?" ON)
option(ENABLE_RTMP        "Enable RTMP support?" ON)
option(ENABLE_BLURAY      "Enable BluRay support?" ON)
option(ENABLE_AFPCLIENT   "Enable AFP support?" ON)
option(ENABLE_PLIST       "Enable AirPlay support?" ON)
option(ENABLE_AIRTUNES    "Enable AirTunes support?" ON)
option(ENABLE_SSH         "Enable SSH support?" ON)
option(ENABLE_NFS         "Enable NFS support?" ON)
option(ENABLE_X11         "Enable X11 support?" ON)
option(ENABLE_SDL         "Enable SDL?" ON)
option(ENABLE_OPENGL      "Enable OpenGL?" ON)
option(ENABLE_EXTERNAL_FFMPEG "Enable external ffmpeg?" OFF)
option(ENABLE_EXTERNAL_LIBAV "Enable external libav?" OFF)
# System options
option(ENABLE_CROSSCOMPILE    "Enable Cross_compiling?" OFF)
option(WITH_ARCH              "build with given arch" OFF)
option(WITH_CPU               "build with given cpu" OFF)

set(XBMC_SOURCE_DIR ${PROJECT_SOURCE_DIR}/../..)
set(XBMC_BUILD_DIR build)
if(BOOTSTRAP_DIR)
  set(UPDATE_COMMAND "")
else()
  set(UPDATE_COMMAND autoreconf -vif)
endif()

include(Scripts/ArchSetup.cmake)

set(INCLUDES ${XBMC_SOURCE_DIR}/addons/library.xbmc.addon
             ${XBMC_SOURCE_DIR}/addons/library.xbmc.codec
             ${XBMC_SOURCE_DIR}/addons/library.xbmc.gui
             ${XBMC_SOURCE_DIR}/addons/library.xbmc.pvr
             ${XBMC_SOURCE_DIR}/lib
             ${XBMC_SOURCE_DIR}/xbmc
             ${XBMC_SOURCE_DIR}/xbmc/linux
             ${XBMC_SOURCE_DIR}/xbmc/cores/dvdplayer
             ${CMAKE_BINARY_DIR}/${XBMC_BUILD_DIR})

find_package(PkgConfig)
find_package(Threads REQUIRED)
list(APPEND DEPLIBS ${CMAKE_THREAD_LIBS_INIT})

# Required dependencies
set(required_deps Sqlite3 FreeType PCRE Cpluff OpenSSL
                  TinyXML Python Yajl LibSmbClient ZLIB
                  JPEG Lzo2 Fribidi SampleRate TagLib FFMPEG)

# Optional dependencies
set(optional_deps MicroHttpd MySqlClient SSH
                  Alsa UDev Dbus Avahi
                  PulseAudio VDPAU VAAPI)

# Required, dyloaded deps
set(required_dyload Curl MAD Modplug ASS Mpeg2
                    Ogg Vorbis VorbisEnc VorbisFile LibDvd)

# Optional, dyloaded deps
set(dyload_optional Lame RTMP CEC Bluray
                    AfpClient Plist NFS)

# Required by shared objects we link
set(required_dep_libs Jasper PNG TIFF EXPAT)

foreach(dep ${required_deps})
  xbmc_require_dep(${dep})
endforeach()

foreach(dep ${required_dep_libs})
  find_package(${dep} REQUIRED)
endforeach()

foreach(dep ${optional_deps})
  xbmc_optional_dep(${dep})
endforeach()

if(NOT UDEV_FOUND)
  xbmc_optional_dep(LibUsb)
endif()

foreach(dep ${required_dyload})
  xbmc_require_dyload_dep(${dep})
endforeach()

# Need a special case due to upper case lib name
find_package(FLAC REQUIRED)
xbmc_find_soname(FLAC FLAC)

foreach(dep ${dyload_optional})
  xbmc_optional_dyload_dep(${dep})
endforeach()

if(ENABLE_UPNP)
  list(APPEND DEP_DEFINES "-DUSE_UPNP=1")
endif()

if(ENABLE_NONFREE)
  list(APPEND DEP_DEFINES "-DHAVE_XBMC_NONFREE=1")
  list(APPEND SUBDIRS ${PROJECT_SOURCE_DIR}/treedata/subdirs-nonfree.txt)
endif()

xbmc_optional_dep(Shairplay ENABLE_AIRTUNES)
if(NOT SHAIRPLAY_FOUND)
  xbmc_optional_dep(Shairport ENABLE_AIRTUNES)
endif()

if(NOT WIN32)
  xbmc_optional_dep(OpenGl)
  if(OPENGL_FOUND)
    xbmc_require_dep(GLEW)
    xbmc_optional_dep(X ENABLE_X11)
    xbmc_optional_dep(XRandR ENABLE_X11)
    xbmc_optional_dep(Sdl)
  endif()
endif()

if(ENABLE_SKIN_TOUCHED)
  list(APPEND DEP_DEFINES "-DHAS_SKIN_TOUCHED=1")
endif()

include_directories(${INCLUDES} ${SYSTEM_INCLUDES})
add_definitions(${ARCH_DEFINES} ${SYSTEM_DEFINES} ${DEP_DEFINES})

set(xbmc-bin_DEPENDS "" CACHE STRING "" FORCE)

if(NOT BOOTSTRAP_DIR)
  set(BOOTSTRAP_IN_TREE 1)
endif()
add_subdirectory(bootstrap ${XBMC_BUILD_DIR}/bootstrap.dir)

# Subdirs
list(APPEND SUBDIRS ${PROJECT_SOURCE_DIR}/treedata/subdirs-common.txt)
if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
  list(APPEND SUBDIRS ${PROJECT_SOURCE_DIR}/treedata/subdirs-linux.txt)
endif()
if(WIN32)
  list(APPEND SUBDIRS ${PROJECT_SOURCE_DIR}/treedata/subdirs-windows.txt)
endif()
xbmc_add_subdir_from_files("${SUBDIRS}")

if(ENABLE_EXTERNAL_FFMPEG OR ENABLE_EXTERNAL_LIBAV)
  add_subdirectory(${XBMC_SOURCE_DIR}/lib/xbmc-dll-symbols ${XBMC_BUILD_DIR}/dll_symbols.dir)
endif()
if(ENABLE_EXTERNAL_LIBAV)
  add_subdirectory(${XBMC_SOURCE_DIR}/lib/xbmc-libav-hacks ${XBMC_BUILD_DIR}/libav-hacks.dir)
endif()

# main binary
add_executable(xbmc.bin ${XBMC_SOURCE_DIR}/xbmc/main/main.cpp)
target_link_libraries(xbmc.bin -Wl,--whole-archive ${xbmc-bin_DEPENDS} -Wl,--no-whole-archive 
                      ${DEPLIBS} ${CMAKE_DL_LIBS})
install(TARGETS xbmc.bin DESTINATION lib/xbmc)

# copy files to build tree
file(STRINGS ${PROJECT_SOURCE_DIR}/treedata/common.txt copy_dirs)
if(EXISTS ${PROJECT_SOURCE_DIR}/treedata/${CMAKE_SYSTEM_NAME}.txt)
  file(STRINGS ${PROJECT_SOURCE_DIR}/treedata/${CMAKE_SYSTEM_NAME}.txt copy_dirs2)
  list(APPEND copy_dirs ${copy_dirs2})
endif()
foreach(dir ${copy_dirs})
  file(GLOB_RECURSE FILES RELATIVE ${XBMC_SOURCE_DIR} ${XBMC_SOURCE_DIR}/${dir})
  foreach(file ${FILES})
    copy_file_to_buildtree(${XBMC_SOURCE_DIR}/${file} ${XBMC_SOURCE_DIR})
  endforeach()
endforeach()

list(APPEND SKINS "${XBMC_SOURCE_DIR}/addons/skin.confluence\;${XBMC_SOURCE_DIR}")

# These are skins that are copied into place from the source tree
foreach(skin ${SKINS})
  list(GET skin 0 dir)
  list(GET skin 1 relative)
  copy_skin_to_buildtree(${dir} ${relative})
endforeach()

# These for skins we cloned from a git within the build system
foreach(xbt ${EXTRA_XBT})
  pack_xbt(${xbt}/media ${CMAKE_BINARY_DIR}/${xbt}/media/Textures.xbt ${CMAKE_BINARY_DIR})
endforeach()
add_custom_target(pack-skins ALL
                  DEPENDS bootstrap export-files ${XBT_FILES})

set(CXIMAGE_DEPLIBS ${ZLIB_LIBRARIES} ${JPEG_LIBRARIES}
                    ${TIFF_LIBRARIES} ${PNG_LIBRARIES}
                    ${JASPER_LIBRARIES} )

xbmc_link_library(cximage system/ImageLib "nowrap" "${CXIMAGE_DEPLIBS}")
xbmc_link_library(exif system/libexif)
xbmc_link_library(hdhomerun system/hdhomerun)
xbmc_link_library(cmyth system/libcmyth "nowrap" ${MYSQLCLIENT_LIBRARIES})

file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/system/players/paplayer)
xbmc_link_library(nosefart system/players/paplayer/nosefart)
xbmc_link_library(sidplay2 system/players/paplayer/libsidplay2)
xbmc_link_library(stsoundlibrary system/players/paplayer/stsoundlibrary)
xbmc_link_library(xbadpcm system/players/paplayer/adpcm)
xbmc_link_library(vgmstream system/players/paplayer/vgmstream)
xbmc_link_library(timidity
                  system/players/paplayer/timidity "export"
                  ${XBMC_SOURCE_DIR}/lib/timidity/exports.def)

xbmc_link_library(XBMC_addon addons/library.xbmc.addon/libXBMC_addon)
xbmc_link_library(XBMC_codec addons/library.xbmc.codec/libXBMC_codec)
xbmc_link_library(XBMC_gui   addons/library.xbmc.gui/libXBMC_gui)
xbmc_link_library(XBMC_pvr   addons/library.xbmc.pvr/libXBMC_pvr)

file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/system/players/dvdplayer)
add_custom_target(wrap-libraries ALL DEPENDS ${WRAP_FILES})

add_dependencies(xbmc.bin export-files)

set(prefix ${CMAKE_INSTALL_PREFIX})
configure_file(${XBMC_SOURCE_DIR}/xbmc/DllPaths_generated.h.in
               ${XBMC_BUILD_DIR}/DllPaths_generated.h @ONLY)

add_executable(xbmc-xrandr ${XBMC_SOURCE_DIR}/xbmc-xrandr.c)
target_link_libraries(xbmc-xrandr ${X_LIBRARIES} m ${XRANDR_LIBRARIES})

file(STRINGS ${PROJECT_SOURCE_DIR}/treedata/addon-bindings.txt addon_bindings)

set(cmake-files ${XBMC_SOURCE_DIR}/Scripts/AddOptions.cmake
                ${XBMC_SOURCE_DIR}/Scripts/xbmc-addon-helpers.cmake
                ${XBMC_SOURCE_DIR}/xbmc-config.cmake)
configure_file(${XBMC_SOURCE_DIR}/project/cmake/Templates/xbmc-config.cmake.in
               ${XBMC_BUILD_DIR}/xbmc-config.cmake @ONLY)

include(Scripts/Install${CMAKE_SYSTEM_NAME}.cmake)
